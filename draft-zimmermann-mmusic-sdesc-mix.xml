<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc compact="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="5"?>
<?rfc rfcedstyle="yes"?>
<?rfc subcompact="no"?>
<rfc ipr="trust200902" category="std" docName="draft-zimmermann-mmusic-sdesc-mix-00" updates="4568">
<front>
<title abbrev="SDESC Mix">Key Mixing Extension for SDP Security Descriptions</title>

<author initials="P." surname="Zimmermann" fullname="Philip Zimmermann">
<organization>Silent Circle, LLC</organization>
<address>
<postal>
<street></street>
<city>Santa Cruz</city><region>California</region>
</postal>
<email>prz@mit.edu</email>
<uri>http://philzimmermann.com</uri>
</address>
</author>

<author initials="T." surname="Cross" fullname="Travis Cross">
<organization>OfficeTone, LLC</organization>
<address>
<email>tc@traviscross.com</email>
<uri>http://traviscross.com</uri>
</address>
</author>

<author fullname="Dan Wing" initials="D." surname="Wing">
  <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
  <address>
    <postal>
      <street>170 West Tasman Drive</street>
      <city>San Jose</city>
      <region>California</region>
      <code>95134</code>
      <country>USA</country>
    </postal>
    <email>dwing@cisco.com</email>
  </address>
</author>

<date month="November" year="2012"/>

<abstract>
<t>
This document defines a method by which endpoints using SDP Security Descriptions can frustrate attackers who have captured key material leaked by SIP forking and retargeting mechanisms.  We define a Session Description Protocol (SDP) attribute for unicast media streams which can be used to negotiate this extension to SDP Security Descriptions (RFC 4568). </t>
</abstract>

</front>

<middle>
<section anchor='intro' title="Introduction">
<t>
When a SIP user agent makes a call via a SIP proxy, that proxy may send the user agent's INVITE to one or more endpoints that do not successfully answer the call because of <xref target='RFC5479'>SIP forking</xref> and <xref target='RFC5479'>SIP retargeting</xref>.  Despite not being a party to the final media session, these endpoints will have received the full SDP offer.  When the SDP offer contains non-public key information, as it does when using <xref target='RFC4568'>SDP Security Descriptions</xref>, this may result in an attacker acquiring useful key material. </t>
<t>
In this document, we propose a method for mitigating this attack vector for user agents unable to migrate to key negotiation protocols with better security guarantees such as <xref target='RFC6189'>ZRTP</xref> or <xref target='RFC4347'>DTLS</xref>. </t>
<t>
Our method relies on the relative difficulty for the attacker of obtaining the SDP answer.  When a user agent provides its SDP answer, this answer is routed back to the UAC without invoking <xref target='RFC5479'>SIP forking</xref> or <xref target='RFC5479'>retargeting</xref> behaviors. </t>
<t>
By combining the offerer's key and the answer's key using a cryptographically strong function we can <xref target='RFC5869'>extract</xref> a new pseudo-random key (PRK) known only to parties who possess both keys.  We can then <xref target='RFC5869'>expand</xref> this PRK to create new secret keys for both endpoints. </t>
<t>
Despite our illustrative references in this document to <xref target='RFC3261'>SIP</xref>, the vulnerability described applies widely to any session setup protocol that both provides forking or retargeting mechanisms and uses <xref target='RFC4568'>SDP Security Descriptions</xref>.  Similarly, the mitigation mechanism we propose can be used with any protocol that uses <xref target='RFC4566'>SDP</xref> and <xref target='RFC4568'>SDP Security Descriptions</xref>. </t>
</section>

<section anchor='notation' title='Terminology and Notation'>
<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>. </t>
<t>
Throughout this document we use terminology and acronyms defined in Section 6 of <xref target='RFC3261'/>.  Our use of the word 'session' in this document corresponds to the definition of an SDP session in <xref target='RFC4566'/>. </t>
<t>
We represent all fields in network-byte order and denote concatenation with ||.  If we say C = A || B, then the first byte of A forms the most significant byte of C. </t>
<t>
We denote hexidecimal constants with the prefix 0x.  Such a constant is encoded (in network byte order) into an integer of the fewest number of bytes (octets) that can represent the number including any leading zeros, e.g. 0x01 would be encoded in one byte but 0x0001 would be encoded in two bytes. </t>
<t>
If b is a sequence of bytes, len(b) denotes the length of b in octets. </t>
<t>
We denote encoding length in octets with :n where n is an integer.  If a field is longer than n then it is truncated from the right until n octets remain.  If a field is shorter than n, it is padded on the left with zeros.  e.g. 0x01:4 is the integer 1 represented in a 32-bit big-endian field, and len(b):1 is the length of b in octets encoded in a single 8-bit byte. </t>

</section>

<section anchor='sdp-crypto-mix' title='SDP "SDP Security Descriptions Mix" Attribute and Parameters'>
<t>
This extension to <xref target="RFC4568">SDP Security Descriptions</xref> requires support from both endpoints negotiating a session.  We define the "SDP Security Descriptions Mix" (crypto-mix) <xref target="RFC4566">SDP media attribute</xref> to allow the endpoints to signal their support for this extension and to negotiate a MAC function for use in the KDF of <xref target='kdf'/>. </t>
<t>
The formal ABNF grammer for the crypto-mix attribute is defined as: </t>
<figure><artwork><![CDATA[
  "a=crypto-mix:" *WSP mac *("|" mac)

  mac = "HMAC-SHA-384" / "HMAC-SHA-512" / mac-ext
  mac-ext = 1*(%x21-7B / %x7D-7E) ; printing chars except pipe
]]></artwork></figure>
<t>
where WSP is defined in <xref target="RFC4234"/>. </t>
<t>
This attribute MUST only be placed at the SDP media description level and MUST NOT be placed at the SDP session description level. </t>
<t>
The values of mac have the meaning defined in <xref target="RFC2104"/> and <xref target="RFC4634"/>.  Values for mac-ext can be standarized as described in <xref target='iana'/>. </t>

</section>

<section anchor='negotiation' title='SDP Negotiation'>
<t>
An SDP offer or answer may contain multiple media descriptions.  In this section, we consider each media description separately and individually. </t>
<t>
When generating its offer, an endpoint MAY include in a media description the crypto-mix attribute defined in <xref target="sdp-crypto-mix"/>.  If included, the endpoint SHOULD list every MAC function that the endpoint supports.  An endpoint MUST at a minimum support HMAC-SHA-384. </t>
<t>
Upon receiving a media description from the offer, an endpoint MUST reply with the crypto-mix attribute if that media description offer includes an crypto-mix attribute AND the endpoint supports at least one of the MAC functions offered.  The endpoint MUST choose one of the offered MAC functions and place that one (and only that one) MAC function in the crypto-mix attribute of its answer for that media description.  An endpoint may use any local policy to select from among the MAC functions offered to it.  The answering endpoint now commits to using the negotiated MAC function for the processing in <xref target='kdf'/> for the SDP Security Descriptions crypto attribute (if any) it chose in its answer and MUST process the SDP Security Descriptions parameters with this extension. </t>
<t>
Upon receiving a media description in the answer, an endpoint MUST process any SDP Security Descriptions parameters as defined in <xref target='kdf'/> if the media description includes the crypto-mix attribute.  The single MAC function included in the answer is the negotiated MAC function. </t>
<t>
If the offer does not contain an crypto-mix attribute in an SDP media description, an endpoint MUST NOT include the crypto-mix attribute in its answer for that media description.  If an offer or an answer does not contain an crypto-mix attribute in an SDP media description, an endpoint MUST NOT perform the <xref target='kdf'/> processing for any SDP Security Descriptions keys contained in that media description. </t>

</section>

<section anchor='kdf' title='Enhanced SDP Security Descriptions Key Derivation'>
<t>
To calculate new SDP Security Descriptions parameters for a media session, we proceed as follows using the extract-and-expand construct defined in <xref target="RFC5869"/>. </t>

<figure><artwork><![CDATA[
  salt = srtpmsi || srtpmsr
  ikm = len(srtpmki):4 || srtpmki || len(srtpmkr):4 || srtpmkr
  prk = MAC(salt, ikm)

  srtpmsi2 = MAC(prk,             0x01) :len(srtpmsi)
  srtpmki2 = MAC(prk, srtpmsi2 || 0x02) :len(srtpmki)
  srtpmsr2 = MAC(prk, srtpmki2 || 0x03) :len(srtpmsr)
  srtpmkr2 = MAC(prk, srtpmsr2 || 0x04) :len(srtpmkr)
]]></artwork></figure>
<t>
where:
<list style="empty">
<t>MAC is the MAC function negotiated in <xref target='negotiation'/>; </t>
<t>srtpmsi is the SIP initiator's SRTP master salt; </t>
<t>srtpmki is the SIP initiator's SRTP master key; </t>
<t>srtpmsr is the SIP responder's SRTP master salt; </t>
<t>srtpmkr is the SIP responder's SRTP master key; </t>
<t>the lengths of the keys are encoded in 4 octets in network byte order and the constant values are encoded in a single octet. </t>
</list></t>
<t>
The output of the MAC will be truncated as described below.  The parameters srtpmki and srtpmsi are extracted from the SDP Security Descriptions crypto attribute transmitted by the SIP initiator, while srtpmkr and srtpmsr are extracted from the SDP Security Descriptions transmitted by the SIP responder.  The length of the SRTP master salts are defined as 112 bits (14 octets) in <xref target="RFC3711"/>.  The old values for srtpmki, srtpmkr, srtpmsi, srtpmsr, are all respectively replaced by the new values srtpmki2, srtpmkr2, srtpmsi2, and srtpmsr2.  The MAC output is truncated to 14 octets for srtpmsi2 and srtpmsr2, and to the corresponding original key lengths for srtpmki2 and srtpmkr2. </t>
<t>
The original crypto suite selected by SDP Security Descriptions remains unchanged, including the block cipher algorithm, the key lengths, and the SRTP auth tag sizes and auth tag algorithms. </t>

</section>

<section anchor='iana' title='IANA Considerations'>
<t>
Create a new registry, titled Security Description SDESCMIX, initially populated with HMAC-SHA-384 and HMAC-SHA-512.  This registry can be extended via <xref target="RFC5226">Standards Action</xref>, and it MUST provide the name of the MAC function as described in the grammar for mac-ext in <xref target='sdp-crypto-mix'/>. </t>

</section>

</middle>

<back>
<?rfc rfcedstyle="no" ?>
<references title="Normative References">
<?rfc include="reference.RFC.2104" ?><!-- HMAC -->
<?rfc include="reference.RFC.2119" ?><!-- RFC Keywords -->
<?rfc include="reference.RFC.3261" ?><!-- SIP -->
<?rfc include="reference.RFC.3711" ?><!-- SRTP -->
<?rfc include="reference.RFC.4234" ?><!-- ABNF -->
<?rfc include="reference.RFC.4566" ?><!-- SDP -->
<?rfc include="reference.RFC.4568" ?><!-- SDESC -->
<?rfc include="reference.RFC.4634" ?><!-- SHA2 and HMAC-SHA2 -->
<?rfc include="reference.RFC.5226" ?><!-- IANA Considerations -->
<?rfc include="reference.RFC.5869" ?><!-- HKDF -->
</references>

<references title="Informative References">
<!--<rfc include="reference.RFC.4086" />--><!-- Randomness Requirements for Security -->
<?rfc include="reference.RFC.4347" ?><!-- DTLS -->
<!--<rfc include="reference.RFC.4474" />--><!-- SIP Authenticated Identity -->
<!--<rfc include="reference.RFC.4960" />--><!-- SCTP -->
<!--<rfc include="reference.RFC.5246" />--><!-- TLS 1.2 -->
<?rfc include="reference.RFC.5479" ?><!-- Media Security Requirements -->
<!--<rfc include="reference.RFC.5764" />--><!-- DTLS -->
<!--<rfc include="reference.RFC.6188" />--><!-- SRTP AES-192 AES-256 -->
<?rfc include="reference.RFC.6189" ?><!-- SRTP AES-192 AES-256 -->
</references>

<?rfc rfcedstyle="yes" ?>
<?rfc symrefs="yes" ?>
</back>
</rfc>
